version: "3.8"

services:
  # app:
  #   build: .
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - JWT_ACCESS_TOKEN_SECRET=d22a0bd3de4c04f85a839c8d30c95e74551f27c0511dfe525037066db9c4dee53388e4e33dde50208c69c364b6591bdb2ab75be8ccb9aed23c386eaa3a033f87
  #     - JWT_REFRESH_TOKEN_SECRET=8344d9fa82a9e6bae02a79298a26bfd3b827a9f70f732206ad1ba44fcc7b43343082d2cb646c14caaf1ef91c9205a2efd28596b2715272bef5fd62e6d049aee9
  #     - MONGODB_URI=mongodb://mongodb:27017/?directConnection=true
  #     - JWT_ACCESS_EXPIRATION="10min"
  #     - JWT_REFRESH_EXPIRATION="30 days"
  #     - BACKEND_SERVER_URL=http://localhost:8081
  #     - BACKEND_SERVER_PORT=8081
  #     - AWS_ACCESS_KEY_ID=test
  #     - AWS_SECRET_ACCESS_KEY=test
  #     - S3_BUCKETNAME=mysamplebucket
  #     - S3_ENDPOINT_URL=http://localstack:4566
  #     - AWS_REGION=us-east-1
  #     - FRONTEND_SERVER=http://localhost:5173
  #     - LOKI_HOST=http://loki:3100

  #   depends_on:
  #     - mongodb
  #     - localstack
  #     - grafana
  #   volumes:
  #     - backend-data:/app
  #   networks:
  #     - local-network

  mongodb:
    image: mongo
    container_name: mongodb-dev
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017'}]}) }" | mongosh --port 27017 --quiet
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongodb-data:/data/db
    networks:
      - local-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express-dev
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      - mongodb
    networks:
      - local-network

  localstack:
    image: localstack/localstack
    container_name: localstack-dev
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - GATEWAY_LISTEN=0.0.0.0:4566
    volumes:
      - "./localstack/setup.sh:/etc/localstack/init/ready.d/setup.sh"
      - "./localstack/cors-config.json:/etc/localstack/config/cors-config.json"
    networks:
      - local-network

  loki:
    image: grafana/loki:latest
    container_name: loki-dev
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - local-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - local-network

networks:
  local-network:
    driver: bridge
volumes:
  grafana-data:
  backend-data:
  mongodb-data:
